/*
 * Product Search API Product search API
 *
 * OpenAPI spec version: 1.0.0 Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * SearchKeywords
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen",
    date = "2019-08-08T11:22:47.637Z[GMT]")
public class SearchKeywords {
  @JsonProperty("query")
  private List<String> query = new ArrayList<String>();

  @JsonProperty("start")
  private Long start = null;

  @JsonProperty("rows")
  private Long rows = null;

  public SearchKeywords query(List<String> query) {
    this.query = query;
    return this;
  }

  public SearchKeywords addQueryItem(String queryItem) {
    this.query.add(queryItem);
    return this;
  }

  /**
   * Get query
   * 
   * @return query
   **/
  @JsonProperty("query")
  @Schema(required = true, description = "")
  @NotNull
  public List<String> getQuery() {
    return query;
  }

  public void setQuery(List<String> query) {
    this.query = query;
  }

  public SearchKeywords start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * When specified, the start parameter specifies an offset into a query’s result set and instructs
   * Solr to begin displaying results from this offset minimum: 1
   * 
   * @return start
   **/
  @JsonProperty("start")
  @Schema(
      description = "When specified, the start parameter specifies an offset into a query’s result set and instructs Solr to begin displaying results from this offset")
  @Min(1L)
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }

  public SearchKeywords rows(Long rows) {
    this.rows = rows;
    return this;
  }

  /**
   * Use the rows parameter to paginate results from a query. The parameter specifies the maximum
   * number of documents from the complete result set that Solr should return to the client at one
   * time. The default value is 10. That is, by default, Solr returns 10 documents at a time in
   * response to a query minimum: 1
   * 
   * @return rows
   **/
  @JsonProperty("rows")
  @Schema(
      description = "Use the rows parameter to paginate results from a query. The parameter specifies the maximum number of documents from the complete result set that Solr should return to the client at one time. The default value is 10. That is, by default, Solr returns 10 documents at a time in response to a query")
  @Min(1L)
  public Long getRows() {
    return rows;
  }

  public void setRows(Long rows) {
    this.rows = rows;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchKeywords searchKeywords = (SearchKeywords) o;
    return Objects.equals(this.query, searchKeywords.query)
        && Objects.equals(this.start, searchKeywords.start)
        && Objects.equals(this.rows, searchKeywords.rows);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, start, rows);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchKeywords {\n");

    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
